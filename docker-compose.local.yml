version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: odontopro-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: odontopro
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d odontopro"]
      interval: 3s
      timeout: 3s
      retries: 20

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps
    container_name: odontopro-migrate
    env_file:
      - .env.local
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -lc '
        echo "[migrate] aplicando migrations...";
        npx prisma migrate deploy &&
        (npx prisma db seed || echo "[migrate] sem seed configurado â€” pulando");
      '
    restart: "no"

  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps
    container_name: odontopro-web
    env_file:
      - .env.local
    working_dir: /app
    command: >
      sh -lc "
        [ -d node_modules ] || npm ci --ignore-scripts;
        npx prisma generate;
        npm run dev
      "
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      migrate:
        condition: service_completed_successfully
      api:
        condition: service_started
    volumes:
      - .:/app
      - /app/node_modules
      - .next-cache:/app/.next
    restart: unless-stopped

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: deps
    container_name: odontopro-api
    env_file:
      - .env.local
    working_dir: /app/api
    command: >
      sh -lc "
        [ -d node_modules ] || npm ci --ignore-scripts;
        npx prisma generate --schema=../prisma/schema.prisma;
        npm run start:dev
      "
    environment:
      NODE_ENV: development
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - /app/api/node_modules
    restart: unless-stopped

  adminer:
    image: adminer:4
    container_name: odontopro-adminer
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

  stripe-listener:
    image: stripe/stripe-cli:latest
    container_name: odontopro-stripe-listener
    env_file:
      - .env.local
    command: >
      sh -lc "
        stripe listen
          --api-key ${STRIPE_SECRET_KEY}
          --forward-to http://web:3000/api/stripe/webhook
      "
    depends_on:
      - web

volumes:
  pgdata:
  .next-cache:
